-- core
local Vec2 = require 'math.vec2'
local Rect = require 'math.rect'
local units = require 'units'
local game_functions = require 'game_functions'

-- tileset
local tileset = require 'levels.tileset'

-- enemy

local Enemy = @record{
  active: boolean,
  is_moving: boolean,
  frame_cycle: byte,
  anim_frame_cycle: byte,
  position: Vec2,
  player_dir: Vec2,
}

local function emit_walk_sfx()
  local freq: uint32 <comptime> = 210 | (180 << 16)
  local dur: uint32 <comptime> =(4<<8) | (4<<16)
  local vol: uint32 <comptime> = 6 | (14 << 8)
  local flags: uint32 <comptime> = TONE_NOISE

  tone(freq, dur, vol, flags)
end

function Enemy:update_sfx()
  self.frame_cycle = (self.frame_cycle + 1) % 14

  if self.frame_cycle == 0 then
    emit_walk_sfx()
    self.anim_frame_cycle = (self.anim_frame_cycle + 1) % 5
  elseif self.frame_cycle == 7 then
    self.anim_frame_cycle = (self.anim_frame_cycle + 1) % 5
  end
end

function Enemy:hitbox(): Rect
  return Rect { pos = self.position, size = {units.UNIT * 2, units.UNIT * 2} }
end

function Enemy:get_center(): Vec2
  return self.position + Vec2{ units.UNIT , units.UNIT }
end

function Enemy:update()
  if not self.active then
    return
  end

  local SPEED <comptime> = 6.4 * units.UNIT * units.DT

  local is_colliding, collision_dir = game_functions.is_intersecting_obstacle(self:hitbox())
  local is_enemy_seeing_player, player_dir = game_functions.is_enemy_seeing_player(self:get_center(), ((units.UNIT*10) ^ 2))


  self.is_moving = is_enemy_seeing_player or is_colliding

  if self.is_moving then
    if is_enemy_seeing_player then
      self.player_dir = player_dir

      if is_colliding then
        if player_dir.x < 0.0 and collision_dir.x > 0.0 then player_dir.x = 0.0 end
        if player_dir.x > 0.0 and collision_dir.x < 0.0 then player_dir.x = 0.0 end
        if player_dir.y > 0.0 and collision_dir.y < 0.0 then player_dir.y = 0.0 end
        if player_dir.y < 0.0 and collision_dir.y > 0.0 then player_dir.y = 0.0 end
        player_dir = player_dir:normalized()
      end
    else
      self.player_dir = {}

      if is_colliding then
        if player_dir.x < 0.0 and collision_dir.x > 0.0 then player_dir.x = -player_dir.x end
        if player_dir.x > 0.0 and collision_dir.x < 0.0 then player_dir.x = -player_dir.x end
        if player_dir.y > 0.0 and collision_dir.y < 0.0 then player_dir.y = -player_dir.y end
        if player_dir.y < 0.0 and collision_dir.y > 0.0 then player_dir.y = -player_dir.y end
        player_dir = player_dir:normalized()
      end
    end

    self.position = self.position + player_dir * SPEED


    local did_enemy_reach_player, _ = game_functions.is_intersecting_player(self:hitbox())
    if did_enemy_reach_player then
      game_functions.lost_level()
    else
      self:update_sfx()
    end
  end
end

function Enemy:paint()
  if not self.active then
    return
  end

  local pos = self.position - game_functions.get_camera_offset() - Vec2{12, 14}
  local src_x = 0

  if self.is_moving then
    src_x = self.anim_frame_cycle * 5
  end

  tileset.paint_sub(src_x, 9, 5, 4, math.ifloor(pos.x), math.ifloor(pos.y))

  local dc = $DRAW_COLORS
  defer $DRAW_COLORS = dc end

  if self.is_moving then
    $DRAW_COLORS = 0x102
    pos = pos + Vec2{16, 5} + (Vec2{2,2} * self.player_dir)
  else
    pos = pos + Vec2{16, 5}
  end
  tileset.paint_sub(14, 0, 1, 1, math.ifloor(pos.x), math.ifloor(pos.y))
end

return Enemy
