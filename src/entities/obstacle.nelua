-- nelua
local math = require 'math'

-- core
local Vec2 = require 'math.vec2'
local Rect = require 'math.rect'
local units = require 'units'
local game_functions = require 'game_functions'

-- tileset
local tileset = require 'levels.tileset'

-- obstacle
local Obstacle = @record{
  rect: Rect,
}

function Obstacle:hitbox(): Rect
  return self.rect
end

function Obstacle:paint()
  local offset = game_functions.get_camera_offset()
  local px, py = math.ifloor(self.rect.pos.x - offset.x), math.ifloor(self.rect.pos.y - offset.y)
  local _1UNIT <comptime> = 1.0 * units.UNIT

  if self.rect.size.x == _1UNIT or self.rect.size.y == _1UNIT then
    if self.rect.size.x > self.rect.size.y then
      local sx = math.ifloor(self.rect.size.x / units.UNIT)
      tileset.paint_tile(0, 3, px, py)
      for i = 0, < sx do
        tileset.paint_tile(1, 3, px + i*units.UNIT, py)
      end
      tileset.paint_tile(2, 3, px + (sx-1)*units.UNIT, py)

    elseif self.rect.size.x < self.rect.size.y then
      local sy = math.ifloor(self.rect.size.y / units.UNIT)
      tileset.paint_tile(3, 0, px, py)
      for i = 0, < sy do
        tileset.paint_tile(3, 1, px, py + i*units.UNIT)
      end
      tileset.paint_tile(3, 2, px, py + (sy-1)*units.UNIT)

    else
      tileset.paint_tile(3, 3, px, py)
    end
  else
    self:hitbox():paint(offset)
  end
end

return Obstacle
