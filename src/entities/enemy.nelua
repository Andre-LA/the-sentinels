-- core
local Vec2 = require 'math.vec2'
local Rect = require 'math.rect'
local units = require 'units'
local game_functions = require 'game_functions'

-- enemy
local Enemy = @record{
  active: boolean,
  position: Vec2,
}

function Enemy:hitbox(): Rect
  return Rect { pos = self.position, size = {units.UNIT * 2, units.UNIT * 2} }
end

function Enemy:update()
  if not self.active then
    return
  end

  local is_enemy_seeing_player, player_dir = game_functions.is_enemy_seeing_player(self.position, ((units.UNIT*12) ^ 2))
  if is_enemy_seeing_player then
    local SPEED <comptime> = 6 * units.UNIT * units.DT

    local is_colliding, collision_dir = game_functions.is_intersecting_obstacle(self:hitbox())
    if is_colliding then
      if player_dir.x < 0.0 and collision_dir.x > 0.0 then player_dir.x = 0.0 end
      if player_dir.x > 0.0 and collision_dir.x < 0.0 then player_dir.x = 0.0 end
      if player_dir.y > 0.0 and collision_dir.y < 0.0 then player_dir.y = 0.0 end
      if player_dir.y < 0.0 and collision_dir.y > 0.0 then player_dir.y = 0.0 end
    end
    player_dir = player_dir:normalized()

    self.position = self.position + player_dir * SPEED
  end

  local did_enemy_reach_player, _ = game_functions.is_intersecting_player(self:hitbox())
  if did_enemy_reach_player then
    game_functions.lost_level()
  end
end

function Enemy:paint()
  if not self.active then
    return
  end

  self:hitbox():paint(game_functions.get_camera_offset())
end

return Enemy
